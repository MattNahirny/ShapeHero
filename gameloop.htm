<!DOCTYPE html>
<html><head>
		<title>Shape Hero</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body style="background-color:black;">
        <canvas id="canvas" width="320" height="480"></canvas>
		<script>
			var ctx = document.getElementById("canvas").getContext("2d"),
			limit = 300,
			lastFrameTimeMs = 0,
			maxFPS = 60,
			delta = 0,
			timestep = 1000 / 60,
			fps = 60,
			framesThisSecond = 0,
			lastFpsUpdate = 0,
			running = false,
			started = false,
			frameID = 0;
			entities = 0;
			
			var updateBuffer = [];
			updateBuffer.push(new Shape(0, 0, 0, 0.1, 0.1, 10, 10, "yellow"));
			updateBuffer.push(new Shape(20, 20, 0, 0.1, 0, 10, 10, "blue"));
			updateBuffer.push(new Shape(30, 30, 3, 0, 0.1, 10, 10, "green"));
			updateBuffer.push(new Shape(30, 30, 2, 0, 0.1, 10, 10, "red"));
			var layerBuffer = [];
			updateBuffer.push(new Shape(30, 30, 1, 0, 0.1, 10, 10, "orange"));
			function Shape(x, y, z, xVelocity, yVelocity, width, height, color) {
				this.xCurrent = x || 0;
				this.xPrevious = this.xCurrent;
				this.yCurrent = y || 0;
				this.yPrevious = this.yCurrent; 
				this.zCurrent = z || 0;
				this.xVelocity = xVelocity || 0;
				this.yVelocity = yVelocity || 0;
				this.width = width;
				this.height = height;
				this.color = color;
				entities++;
			}
			
			Shape.prototype.offScreen = function() {
				return this.xCurrent >= canvas.width || this.yCurrent >= canvas.height;
			}
			
			Shape.prototype.update = function(delta) {
					this.xPrevious = this.xCurrent;
					this.yPrevious = this.yCurrent;
					this.xCurrent += this.xVelocity * delta;
					this.yCurrent += this.yVelocity * delta;
			}
			
			Shape.prototype.draw = function(interp) {
				ctx.fillStyle = this.color;
				ctx.fillRect(this.xPrevious + (this.xCurrent - this.xPrevious) * interp,
							 this.yPrevious + (this.yCurrent - this.yPrevious) * interp, 
							 this.width, this.height);
			}
			
			
			
			function update(delta) {
				var l = updateBuffer.length,
				s = 0;
				for (var i = 0; i < l; i++) {
					if(updateBuffer[i - s].offScreen()) {
						updateBuffer.splice(i - s, 1);
						s++;
						entities--;
						updateBuffer.push(new Shape(30, 30, 3, 0, 0.1, 10, 10, "green"));
						updateBuffer.push(new Shape(30, 30, 1, 0.1, 0.1, 10, 10, "orange"));
					} else {
						updateBuffer[i - s].update(delta);
						layerBuffer.push(updateBuffer[i - s]);
					}	
				}
				layerBuffer.sort(function(a, b) {
					return b.zCurrent - a.zCurrent;
				});
			}

			function draw(interp) {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				var l = layerBuffer.length;
				for (var i = 0; i < l; i++) {
					layerBuffer[i].draw(interp);
				}
				layerBuffer = [];
				ctx.fillText("Entities: " + entities, 180, 480);
				ctx.fillText("FPS: " + Math.round(fps),180,460);
			}

			function panic() {
				delta = 0;
				ctx.fillText("Panic",100,200);
			}

			function begin() {
			}

			function end(fps) {
				if (fps < 25) {
					stop();
				}
				else if (fps > 30) {
				}
			}

			function stop() {
				running = false;
				started = false;
				cancelAnimationFrame(frameID);
			}

			function start() {
				if (!started) {
					started = true;
					frameID = requestAnimationFrame(function(timestamp) {
						draw(1);
						running = true;
						lastFrameTimeMs = timestamp;
						lastFpsUpdate = timestamp;
						framesThisSecond = 0;
						frameID = requestAnimationFrame(mainLoop);
					});
				}
			}

			function mainLoop(timestamp) {
				// Throttle the frame rate.    
				if (timestamp < lastFrameTimeMs + (1000 / maxFPS)) {
					frameID = requestAnimationFrame(mainLoop);
					return;
				}
				delta += timestamp - lastFrameTimeMs;
				lastFrameTimeMs = timestamp;

				begin(timestamp, delta);

				if (timestamp > lastFpsUpdate + 1000) {
					fps = 0.25 * framesThisSecond + 0.75 * fps;

					lastFpsUpdate = timestamp;
					framesThisSecond = 0;
				}
				framesThisSecond++;

				var numUpdateSteps = 0;
				while (delta >= timestep) {
					update(timestep);
					delta -= timestep;
					if (++numUpdateSteps >= 240) {
						panic();
						break;
					}
				}

				draw(delta / timestep);

				end(fps);

				frameID = requestAnimationFrame(mainLoop);
			}

			start();			
		</script>
    

</body></html>