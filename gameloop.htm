<!DOCTYPE html>
<html>
	<head>
		<title>Shape Hero</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
    </head>
    <body style="background-color:black;">
        <canvas id="canvas" width="320" height="480"></canvas>
		<script>
			var ctx = document.getElementById("canvas").getContext("2d"),
			fpsDisplay = document.getElementById('fpsDisplay'),
			boxPos = 10,
			boxLastPos = 10,
			boxVelocity = 0.1,
			limit = 300,
			lastFrameTimeMs = 0,
			maxFPS = 60,
			delta = 0,
			timestep = 1000 / 60,
			fps = 60,
			framesThisSecond = 0,
			lastFpsUpdate = 0,
			running = false,
			started = false,
			frameID = 0;
			
			
			function Button(x, y, layer, width, height) {
				
			}
			
			function Shape(x, y, z, xVelocity, yVelocity) {
				this.xCurrent = x || 0;
				this.xPrevious = this.xCurrent;
				this.yCurrent = y || 0;
				this.yPrevious = this.yCurrent; 
				this.zCurrent = z || 0;
				this.xVelocity = xVelocity || 0;
				this.yVelocity = yVelocity || 0;
			}
			
			Shape.prototype.draw = function(ctx) {
			  ctx.fillStyle = this.fill;
			  ctx.fillRect(this.x, this.y, this.w, this.h);
			}
			
			var zBuffer = [];
			zBuffer.push(new Shape(0, 10, 0, 0.1, 0));
			zBuffer.push(new Shape(0, 30, 0, 0.2, 0));
			//var s1 = new Shape(0, 10, 0, 0.1, 0);
			
			function update(delta) {
				var l = zBuffer.length;
				for (var i = 0; i < l; i++) {
					zBuffer[i].xPrevious = zBuffer[i].xCurrent;
					zBuffer[i].yPrevious = zBuffer[i].yCurrent;
					zBuffer[i].xCurrent += zBuffer[i].xVelocity * delta;
					zBuffer[i].yCurrent += zBuffer[i].yVelocity * delta;
				}
				/*s1.xPrevious = s1.xCurrent;
				s1.xCurrent += s1.xVelocity * delta;
				boxLastPos = boxPos;
				boxPos += boxVelocity * delta;
				if (boxPos >= limit || boxPos <= 0) boxVelocity = -boxVelocity;*/
			}

			function draw(interp) {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				var l = zBuffer.length;
				for (var i = 0; i < l; i++) {
					ctx.fillStyle="red";
					ctx.fillRect(zBuffer[i].xPrevious + (zBuffer[i].xCurrent - zBuffer[i].xPrevious) * interp, 10, 10, 10);
				}
				ctx.fillStyle="red";
				/*ctx.fillRect(objects[0].xPrevious + (objects[0].xCurrent - objects[0].xPrevious) * interp, 10, 10, 10);*/
				//ctx.fillRect(s1.xPrevious, 10, 10, 10);
				
				ctx.fillText("FPS: " + Math.round(fps),180,460);
				//ctx.fillText( s1.xCurrent + " " + s1.xVelocity, 100, 100);
				
			}

			function panic() {
				delta = 0;
				ctx.fillText("Panic",100,200);
			}

			function begin() {
			}

			function end(fps) {
				if (fps < 25) {
				}
				else if (fps > 30) {
				}
			}

			function stop() {
				running = false;
				started = false;
				cancelAnimationFrame(frameID);
			}

			function start() {
				if (!started) {
					started = true;
					frameID = requestAnimationFrame(function(timestamp) {
						draw(1);
						running = true;
						lastFrameTimeMs = timestamp;
						lastFpsUpdate = timestamp;
						framesThisSecond = 0;
						frameID = requestAnimationFrame(mainLoop);
					});
				}
			}

			function mainLoop(timestamp) {
				// Throttle the frame rate.    
				if (timestamp < lastFrameTimeMs + (1000 / maxFPS)) {
					frameID = requestAnimationFrame(mainLoop);
					return;
				}
				delta += timestamp - lastFrameTimeMs;
				lastFrameTimeMs = timestamp;

				begin(timestamp, delta);

				if (timestamp > lastFpsUpdate + 1000) {
					fps = 0.25 * framesThisSecond + 0.75 * fps;

					lastFpsUpdate = timestamp;
					framesThisSecond = 0;
				}
				framesThisSecond++;

				var numUpdateSteps = 0;
				while (delta >= timestep) {
					update(timestep);
					delta -= timestep;
					if (++numUpdateSteps >= 240) {
						panic();
						break;
					}
				}

				draw(delta / timestep);

				end(fps);

				frameID = requestAnimationFrame(mainLoop);
			}

			start();			
		</script>
    </body>

</html>